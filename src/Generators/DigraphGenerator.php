<?php declare(strict_types=1);
/**
 * PHP version 7.4
 *
 * This source file is subject to the license that is bundled with this package in the file LICENSE.
 */

namespace PhUml\Generators;

use PhUml\Console\Commands\GeneratorInput;
use PhUml\Parser\CodeFinder;
use PhUml\Parser\CodeParser;
use PhUml\Processors\GraphvizProcessor;
use PhUml\Processors\OutputWriter;

/**
 * It generates a file with a digraph in DOT format that can be used to create a class diagram
 *
 * You might want to create a different output using either `neato` or `dot`.
 * The file this command creates can be used as an intermediate step.
 * For instance:
 *
 * `neato -Tpdf output.gv > output.pdf`
 *
 * Where `output.gv` is the file generated by this action
 */
final class DigraphGenerator
{
    private CodeFinder $codeFinder;

    private CodeParser $codeParser;

    protected GraphvizProcessor $digraphProcessor;

    private OutputWriter $writer;

    public static function fromConfiguration(DotFileConfiguration $configuration): DigraphGenerator
    {
        return new self(
            $configuration->codeFinder(),
            $configuration->codeParser(),
            $configuration->graphvizProcessor(),
            $configuration->writer()
        );
    }

    public function __construct(
        CodeFinder  $codeFinder,
        CodeParser $codeParser,
        GraphvizProcessor $digraphProcessor,
        OutputWriter $writer
    ) {
        $this->codeFinder = $codeFinder;
        $this->codeParser = $codeParser;
        $this->digraphProcessor = $digraphProcessor;
        $this->writer = $writer;
    }

    public function generate(GeneratorInput $input): void
    {
        $input->display()->start();
        $sourceCode = $this->codeFinder->find($input->directory());
        $input->display()->runningParser();
        $codebase = $this->codeParser->parse($sourceCode);
        $input->display()->runningProcessor($this->digraphProcessor);
        $digraph = $this->digraphProcessor->process($codebase);
        $input->display()->savingResult();
        $this->writer->save($digraph, $input->outputFile());
    }
}
